from flask import Blueprint
bp = Blueprint('auth', __name__, url_prefix='/auth')

# ===========================
# Route de connexion pour le gérant
# ===========================
@bp.route('/login/gerant', methods=['POST', 'OPTIONS'])
def login_gerant():
    # Réponse à la requête CORS (préparation avant l'envoi réel de données)
    if request.method == 'OPTIONS':
        logger.info("Requête OPTIONS reçue sur /login/gerant.")
        return jsonify({'message': 'Preflight OK'}), 200

    try:
        # Récupère les données envoyées en JSON (identifiant et mot de passe)
        data = request.get_json()
        logger.info("Tentative de connexion d'un gérant avec les données : %s", data)

        identifiant = data.get('identifiant')
        mot_de_passe = data.get('mot_de_passe')

        # Vérifie que les deux champs sont bien remplis
        if not identifiant or not mot_de_passe:
            logger.warning("Identifiant ou mot de passe manquant.")
            return jsonify({'message': 'Identifiant et mot de passe sont requis.'}), 400

        # Cherche un gérant avec l’identifiant donné dans la base de données
        gerant = Gerant.query.filter_by(Identifiant=identifiant).first()

        # Si le gérant existe et que le mot de passe est correct
        if gerant and bcrypt.check_password_hash(gerant.Mot_de_passe, mot_de_passe):
            logger.info("Connexion réussie pour le gérant : Id=%s, Identifiant=%s", gerant.Id_Gerant, gerant.Identifiant)
            
            # Prépare la réponse avec les infos du gérant
            resp = make_response(jsonify({
                'message': 'Connexion réussie',
                'Id_Gerant': gerant.Id_Gerant,
                'Identifiant': gerant.Identifiant,
                'role': 'gerant'
            }), 200)

            # Ajoute un cookie sécurisé pour garder la session
            resp.set_cookie(
                'session_gerant',               # nom du cookie
                str(gerant.Id_Gerant),          # valeur (id du gérant)
                httponly=True,                  # non accessible via JavaScript
                secure=True,                    # uniquement en HTTPS
                samesite='None',                # permet le partage entre domaines
                max_age=3600                    # valable 1 heure
            )
            logger.info("Cookie sécurisé défini pour le gérant ID : %s", gerant.Id_Gerant)
            return resp

        # Si le gérant n’existe pas ou mot de passe incorrect
        logger.warning("Échec de connexion pour l'identifiant : %s", identifiant)
        return jsonify({'message': 'Identifiant ou mot de passe incorrect.'}), 401

    except Exception as e:
        # En cas d'erreur serveur
        logger.exception("Erreur serveur lors de la tentative de connexion du gérant.")
        return jsonify({'message': f'Erreur serveur : {str(e)}'}), 500

# ===========================
# Route de connexion pour le campeur
# ===========================
@bp.route('/login/campeur', methods=['POST', 'OPTIONS'])
def login_campeur():
    # Réponse à la requête préliminaire CORS
    if request.method == 'OPTIONS':
        logger.info("Requête OPTIONS reçue pour /login/campeur.")
        return '', 204

    try:
        # Récupère les données envoyées par le campeur
        data = request.get_json()
        logger.info("Tentative de connexion d’un campeur avec les données : %s", data)

        identifiant = data.get('identifiant')
        mot_de_passe = data.get('mot_de_passe')

        # Vérifie que les champs ne sont pas vides
        if not identifiant or not mot_de_passe:
            logger.warning("Champs manquants pour la connexion campeur.")
            return jsonify({'message': 'Identifiant et mot de passe sont requis.'}), 400

        # Cherche le campeur dans la base
        campeur = Campeur.query.filter_by(Identifiant=identifiant).first()
        if not campeur:
            logger.warning("Identifiant campeur non trouvé : %s", identifiant)
            return jsonify({'message': 'Identifiant non trouvé.'}), 401

        # Vérifie que le mot de passe est correct
        if not bcrypt.check_password_hash(campeur.Mot_de_passe, mot_de_passe):
            logger.warning("Mot de passe incorrect pour l’identifiant : %s", identifiant)
            return jsonify({'message': 'Mot de passe incorrect.'}), 401

        # Connexion OK : enregistre l’ID du campeur dans la session
        session['campeur_id'] = campeur.Id_Campeur
        logger.info("Connexion réussie pour le campeur ID : %s", campeur.Id_Campeur)

        # Réponse avec un cookie sécurisé
        resp = make_response(jsonify({'message': 'Connexion réussie'}), 200)
        resp.set_cookie(
            'session_campeur',
            str(campeur.Id_Campeur),
            httponly=True,
            secure=True,
            samesite='None',
            max_age=3600
        )
        logger.info("Cookie sécurisé défini pour le campeur ID : %s", campeur.Id_Campeur)
        return resp

    except Exception as e:
        # Gestion des erreurs serveur
        logger.exception("Erreur lors de la tentative de connexion campeur.")
        return jsonify({'message': f'Erreur serveur : {str(e)}'}), 500
