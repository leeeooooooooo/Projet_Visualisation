from flask import Blueprint
bp = Blueprint('seuils', __name__, url_prefix='/seuils')

# Route pour créer les seuils de consommation pour un emplacement donné
@bp.route('/seuils', methods=['POST'])
def creation_seuils():
    try:
        # Récupération des données JSON envoyées dans la requête HTTP
        data = request.get_json()
        logger.info("Requête POST reçue pour création de seuils : %s", data)

        # Vérifie la présence du champ Numero_Emplacement (clé étrangère)
        numero_emplacement = data.get('Numero_Emplacement')
        if not numero_emplacement:
            logger.warning("Numero_Emplacement manquant dans la requête")
            return jsonify({'message': 'Numero_Emplacement est requis.'}), 400

        # Vérifie que l’emplacement existe bien dans la base de données
        emplacement = Emplacement.query.filter_by(Numero_Emplacement=numero_emplacement).first()
        if not emplacement:
            logger.warning("Emplacement introuvable pour Numero_Emplacement : %s", numero_emplacement)
            return jsonify({'message': 'Emplacement introuvable.'}), 404

        # Création d'un objet Seuil avec les valeurs envoyées dans la requête
        seuil = Seuil(
            Id_Emplacement=emplacement.Id_Emplacement,
            Seuil_Electricite_Matin=data.get('Seuil_Electricite_Matin'),
            Seuil_Electricite_Midi=data.get('Seuil_Electricite_Midi'),
            Seuil_Electricite_Soir=data.get('Seuil_Electricite_Soir'),
            Seuil_Electricite_Nuit=data.get('Seuil_Electricite_Nuit'),
            Seuil_Eau_Matin=data.get('Seuil_Eau_Matin'),
            Seuil_Eau_Midi=data.get('Seuil_Eau_Midi'),
            Seuil_Eau_Soir=data.get('Seuil_Eau_Soir'),
            Seuil_Eau_Nuit=data.get('Seuil_Eau_Nuit')
        )

        # Insertion de l'objet Seuil dans la base de données
        db.session.add(seuil)
        db.session.commit()

        logger.info("Seuils créés avec succès pour emplacement ID : %s", emplacement.Id_Emplacement)
        return jsonify({'message': 'Seuils enregistrés avec succès.'}), 201

    except Exception as e:
        # En cas d'erreur, annule les changements et envoie une réponse d’erreur
        db.session.rollback()
        logger.exception("Erreur serveur lors de la création des seuils")
        return jsonify({'message': f'Erreur serveur : {str(e)}'}), 500

# Route pour modifier les seuils de consommation d’un emplacement existant
@bp.route('/seuils/<string:numero_emplacement>', methods=['PUT'])
def modifier_seuils(numero_emplacement):
    try:
        # Récupération des données JSON envoyées dans la requête HTTP
        data = request.get_json()
        logger.info("Requête PUT reçue pour modifier seuils de l'emplacement %s : %s", numero_emplacement, data)

        # Recherche de l'emplacement correspondant au numéro fourni
        emplacement = Emplacement.query.filter_by(Numero_Emplacement=numero_emplacement).first()
        if not emplacement:
            logger.warning("Emplacement introuvable pour Numero_Emplacement : %s", numero_emplacement)
            return jsonify({'message': 'Emplacement introuvable.'}), 404

        # Recherche des seuils existants associés à cet emplacement
        seuil = Seuil.query.filter_by(Id_Emplacement=emplacement.Id_Emplacement).first()
        if not seuil:
            logger.warning("Aucun seuil trouvé pour emplacement ID : %s", emplacement.Id_Emplacement)
            return jsonify({'message': 'Aucun seuil trouvé pour cet emplacement.'}), 404

        # Mise à jour des seuils un par un, uniquement si une nouvelle valeur est fournie
        seuil.Seuil_Electricite_Matin = data.get('Seuil_Electricite_Matin', seuil.Seuil_Electricite_Matin)
        seuil.Seuil_Electricite_Midi  = data.get('Seuil_Electricite_Midi',  seuil.Seuil_Electricite_Midi)
        seuil.Seuil_Electricite_Soir  = data.get('Seuil_Electricite_Soir',  seuil.Seuil_Electricite_Soir)
        seuil.Seuil_Electricite_Nuit  = data.get('Seuil_Electricite_Nuit',  seuil.Seuil_Electricite_Nuit)
        seuil.Seuil_Eau_Matin         = data.get('Seuil_Eau_Matin',         seuil.Seuil_Eau_Matin)
        seuil.Seuil_Eau_Midi          = data.get('Seuil_Eau_Midi',          seuil.Seuil_Eau_Midi)
        seuil.Seuil_Eau_Soir          = data.get('Seuil_Eau_Soir',          seuil.Seuil_Eau_Soir)
        seuil.Seuil_Eau_Nuit          = data.get('Seuil_Eau_Nuit',          seuil.Seuil_Eau_Nuit)

        # Enregistrement des changements dans la base de données
        db.session.commit()
        logger.info("Seuils mis à jour avec succès pour emplacement ID : %s", emplacement.Id_Emplacement)

        return jsonify({'message': 'Seuils mis à jour avec succès.'}), 200

    except Exception as e:
        # Annulation de la transaction en cas d'erreur
        db.session.rollback()
        logger.exception("Erreur serveur lors de la modification des seuils pour emplacement %s", numero_emplacement)
        return jsonify({'message': f'Erreur serveur : {str(e)}'}), 500

