import json
import mysql.connector
from paho.mqtt.client import Client

# --- Configuration base de données ---
db_config = {
    "host": "172.20.0.39",        # Adresse IP du serveur MariaDB
    "user": "camping",            # Nom d'utilisateur de la base
    "password": "camping",        # Mot de passe de l'utilisateur
    "database": "camping_db"      # Nom de la base contenant les consommations
}

# --- Configuration de la connexion MQTT vers The Things Network (TTN) ---
MQTT_BROKER = "eu1.cloud.thethings.network"   # Serveur TTN européen
MQTT_PORT = 8883                              # Port MQTT sécurisé (TLS)
MQTT_TOPIC = "v3/camping5@ttn/devices/camping-project/up"  # Topic d'abonnement (uplink)
MQTT_USER = "camping5@ttn"                    # Identifiant TTN de l'application
MQTT_PASSWORD = "..."                         # Mot de passe (jeton d'accès TTN)

# --- Fonction qui récupère les seuils configurés pour un emplacement ---
def get_seuils(cursor, id_emplacement):
    # On interroge la table Seuils pour récupérer les seuils personnalisés
    cursor.execute("SELECT Seuil_eau, Seuil_electricite FROM Seuils WHERE Id_Emplacement = %s", (id_emplacement,))
    seuils = cursor.fetchone()
    if seuils:
        return seuils[0], seuils[1]  # On retourne (seuil_eau, seuil_elec)
    return None, None  # Aucun seuil trouvé : on retourne des valeurs nulles

# --- Fonction exécutée à chaque réception d’un message MQTT ---
def on_message(client, userdata, msg):
    try:
        # Décodage du message MQTT reçu (en JSON)
        payload = json.loads(msg.payload.decode())
        data = payload.get("uplink_message", {}).get("decoded_payload", {})
        print("Message reçu :", data)

        # Récupération des champs utiles depuis la trame
        adco = data.get("ADCO")                # Identifiant compteur
        horodate = data.get("HORODATE")        # Date/heure de mesure
        base = data.get("BASE")                # Consommation électrique
        eau = data.get("EAU")                  # Consommation d’eau
        id_emplacement = data.get("EMPLACEMENT")  # Emplacement dynamique

        # Si l'emplacement est absent, on arrête le traitement
        if id_emplacement is None:
            print("EMPLACEMENT manquant dans la trame.")
            return

        # Connexion à la base de données
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()

        # Récupération des seuils correspondant à l'emplacement
        seuil_eau, seuil_electricite = get_seuils(cursor, id_emplacement)

        # --- Traitement des données de consommation électrique ---
        if adco and base is not None and horodate:
            query = """
                INSERT INTO Consommation_electrique (Date_heure, Periode, Quantite, Id_Emplacement)
                VALUES (%s, %s, %s, %s)
            """
            values = (horodate, "journalière", base, id_emplacement)
            cursor.execute(query, values)
            conn.commit()
            print("Données électricité insérées :", values)

            # Vérification du dépassement du seuil électrique
            if seuil_electricite is not None and base > seuil_electricite:
                print(f"Alerte : consommation électrique dépasse le seuil à l'emplacement {id_emplacement} !")

        # --- Traitement des données de consommation d’eau ---
        elif adco and eau is not None and horodate:
            query = """
                INSERT INTO Consommation_eau (Date_heure, Periode, Quantite, Id_Emplacement)
                VALUES (%s, %s, %s, %s)
            """
            values = (horodate, "journalière", eau, id_emplacement)
            cursor.execute(query, values)
            conn.commit()
            print("Données eau insérées :", values)

            # Vérification du dépassement du seuil eau
            if seuil_eau is not None and eau > seuil_eau:
                print(f"Alerte : consommation d’eau dépasse le seuil à l'emplacement {id_emplacement} !")

        else:
            # Aucune donnée exploitable
            print("Données incomplètes ou non reconnues :", data)

        # Fermeture propre de la connexion SQL
        cursor.close()
        conn.close()

    except Exception as e:
        # Gestion des erreurs (affichage sans arrêt du script)
        print("Erreur :", e)

# --- Configuration du client MQTT sécurisé ---
client = Client()
client.username_pw_set(MQTT_USER, MQTT_PASSWORD)
client.tls_set()  # TLS = connexion sécurisée

client.on_message = on_message  # Définition du callback

# --- Connexion au broker TTN et abonnement ---
client.connect(MQTT_BROKER, MQTT_PORT)
client.subscribe(MQTT_TOPIC)

print("En attente de messages MQTT...")
client.loop_forever()  # Boucle infinie : le script reste à l'écoute
